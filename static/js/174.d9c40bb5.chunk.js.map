{"version":3,"file":"static/js/174.d9c40bb5.chunk.js","mappings":"6MAGaA,G,SAAcC,EAAAA,EAAAA,IAAH,0sB,uCCFxB,GAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,IAAM,0B,SCItH,SAASC,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAC5B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAoBJ,EAAAA,EAAAA,UAAS,IAA7B,eAAOK,EAAP,KAAWC,EAAX,KAiBMC,EAAQ,WACZL,EAAQ,IACRE,EAAS,IACTE,EAAM,GACP,EAED,OACE,gBAAKE,UAAWC,EAAAA,UAAhB,UACE,kBAAMV,SAdW,SAAAW,GACnBA,EAAIC,iBACJZ,EAAS,CAAEE,KAAAA,EAAME,MAAAA,EAAOE,GAAAA,IACxBE,GACD,EAUiCC,UAAWC,EAAAA,KAAzC,WACE,mBAAOG,QAASP,EAAIG,UAAWC,EAAAA,MAA/B,kBAEE,kBACED,UAAWC,EAAAA,MACXI,KAAK,OACLC,MAAOb,EACPc,SA9Be,SAAAL,GACvBR,EAAQQ,EAAIM,OAAOF,OACnBR,GAAMW,EAAAA,EAAAA,MACP,EA4BShB,KAAK,OACLI,GAAIA,EACJa,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOR,QAAQ,GAAGJ,UAAWC,EAAAA,MAA7B,oBAEE,kBACED,UAAWC,EAAAA,MACXI,KAAK,MACLC,MAAOX,EACPY,SAvCiB,SAAAL,GACzBN,EAASM,EAAIM,OAAOF,MACrB,EAsCSb,KAAK,QACLiB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQZ,UAAWC,EAAAA,IAASI,KAAK,SAAjC,6BAMP,C,cClED,EAAuB,0BAAvB,EAAuD,yBAAvD,EAAuF,0BCEjFQ,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAC/B,OACE,eAAIf,UAAWC,EAAf,SACGa,EAASE,KAAI,SAAAC,GACZ,OACE,gBAAqBjB,UAAWC,EAAhC,UACGgB,EAAQxB,KADX,KACmBwB,EAAQtB,OACzB,mBACEK,UAAWC,EACXI,KAAK,SACLa,QAAS,kBAAMH,EAAgBE,EAAQpB,GAA9B,EACTA,GAAIoB,EAAQpB,GAJd,sBAFOoB,EAAQpB,GAYpB,KAGN,EAED,IAEAgB,EAAYM,UAAY,CACtBD,Q,MAASE,GAAAA,KAAAA,YC3BX,MAAwB,sBAAxB,EAAsD,sBCoBtD,EAlBe,SAAC,GAAyB,IAAvBd,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvB,OACE,mBAAOH,QAAQ,GAAGJ,UAAWC,EAA7B,mCAEE,kBACED,UAAWC,EACXI,KAAK,OACLC,MAAOA,EACPC,SAAUA,EACVd,KAAK,OACLiB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,MAIf,E,oBCnBYS,EAAc,SAAAC,GAAK,OAAIA,EAAMC,MAAMA,KAAhB,EACnBC,EAAkB,SAAAF,GAAK,OAAIA,EAAMC,MAAME,SAAhB,EACvBC,EAAc,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,KAAhB,EAEnBC,EAAe,SAAAN,GAAK,OAAIA,EAAMO,MAAV,ECMlB,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,IAAYC,GACzBZ,GAAQW,EAAAA,EAAAA,IAAYC,GACpBV,GAAYS,EAAAA,EAAAA,IAAYC,GACxBR,GAAQO,EAAAA,EAAAA,IAAYC,GAiBpBC,EAAgBb,EAAMM,QAAO,SAAAQ,GAAI,OACrCA,EAAK5C,KAAK6C,cAAcC,SAASN,EAAWK,cADP,IAQvC,OAJAE,EAAAA,EAAAA,YAAU,WACRT,EAASU,EAAAA,gBACV,GAAE,CAACV,KAGF,4BACE,uCACA,SAACzC,EAAD,CAAaC,SA1BM,SAAC,GAAqB,IAAnBE,EAAkB,EAAlBA,KAAME,EAAY,EAAZA,MACxB+C,EAAajD,EAAK6C,cACxBf,EAAMoB,MAAK,SAAA1B,GAAO,OAAIA,EAAQxB,KAAK6C,gBAAkBI,CAAnC,IACdE,MAAM,kCACNb,EAASU,EAAAA,WAAsB,CAAEhD,KAAAA,EAAME,MAAAA,IAC5C,KAsBG,sCACA,SAAC,EAAD,CAAQW,MAAO2B,EAAY1B,SAjBN,SAAAL,GACvB6B,GAASc,EAAAA,EAAAA,GAAU3C,EAAIM,OAAOF,OAC/B,IAgBImB,IAAcE,IAAS,oDACvBA,IAAS,uBAAIA,KACd,SAAC,EAAD,CAAab,SAAUsB,EAAerB,gBAxBrB,SAAA+B,GACnBf,EAASU,EAAAA,cAAyBK,GACnC,KAuBG,SAAC1D,EAAD,MAGL,C","sources":["components/GlobalStyle.jsx","webpack://react-homework-template/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/contactForm.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/contactList.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/filter.jsx","redux/contacts/selectors.jsx","pages/contacts.jsx"],"sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    padding-top: 40px;\n    padding-left: 40px;\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n  h1,h2,h3,h4,h5,h6,p {\n    margin: 0;\n  }\n  ul,ol {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n\n  h1 {\n    font-size: 45px;\n  }\n\n  h2 {\n    font-size: 35px;\n    margin-top:25px;\n    margin-bottom:25px;\n  }\n`;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"label\":\"contactForm_label__WakW9\",\"input\":\"contactForm_input__wCtae\",\"btn\":\"contactForm_btn__qtr3a\"};","import { nanoid } from 'nanoid';\nimport css from './contactForm.module.css';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [id, setId] = useState('');\n\n  const handleChangeName = evt => {\n    setName(evt.target.value);\n    setId(nanoid());\n  };\n\n  const handleChangeNumber = evt => {\n    setPhone(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    onSubmit({ name, phone, id });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n    setId('');\n  };\n\n  return (\n    <div className={css.phonebook}>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <label htmlFor={id} className={css.label}>\n          Name\n          <input\n            className={css.input}\n            type=\"text\"\n            value={name}\n            onChange={handleChangeName}\n            name=\"name\"\n            id={id}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor=\"\" className={css.label}>\n          Number\n          <input\n            className={css.input}\n            type=\"tel\"\n            value={phone}\n            onChange={handleChangeNumber}\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={css.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  phone: PropTypes.number,\n  id: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"contactList_item__iETfD\",\"btn\":\"contactList_btn__D1sqk\",\"list\":\"contactList_list__R0BG5\"};","import PropTypes from 'prop-types';\nimport css from './contactList.module.css';\n\nconst ContactList = ({ contacts, onLeaveFeedback }) => {\n  return (\n    <ul className={css.list}>\n      {contacts.map(contact => {\n        return (\n          <li key={contact.id} className={css.item}>\n            {contact.name}: {contact.phone}\n            <button\n              className={css.btn}\n              type=\"button\"\n              onClick={() => onLeaveFeedback(contact.id)}\n              id={contact.id}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\nContactList.protoType = {\n  onClick: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"filter_label__nHxuJ\",\"input\":\"filter_input__sX944\"};","import PropTypes from 'prop-types';\nimport css from './filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label htmlFor=\"\" className={css.label}>\n      Find contacts by name\n      <input\n        className={css.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","export const selectItems = state => state.items.items;\nexport const selectIsLoading = state => state.items.isLoading;\nexport const selectError = state => state.items.error;\n\nexport const selectFilter = state => state.filter;\n","import { GlobalStyle } from '../components/GlobalStyle';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ContactForm } from '../components/ContactForm/contactForm';\nimport ContactList from '../components/ContactList/contactList';\nimport Filter from '../components/Filter/filter';\nimport PropTypes from 'prop-types';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { operations, selectors } from '../redux/contacts';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const filterCont = useSelector(selectors.selectFilter);\n  const items = useSelector(selectors.selectItems);\n  const isLoading = useSelector(selectors.selectIsLoading);\n  const error = useSelector(selectors.selectError);\n\n  const addContactList = ({ name, phone }) => {\n    const searchName = name.toLowerCase();\n    items.find(contact => contact.name.toLowerCase() === searchName)\n      ? alert('contact is already in contacts')\n      : dispatch(operations.addContact({ name, phone }));\n  };\n\n  const handleDelete = itemId => {\n    dispatch(operations.deleteContact(itemId));\n  };\n\n  const handleFindChange = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  const filterContact = items.filter(item =>\n    item.name.toLowerCase().includes(filterCont.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(operations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContactList} />\n      <h2>Contacts</h2>\n      <Filter value={filterCont} onChange={handleFindChange} />\n      {isLoading && !error && <b>Request in progress.....</b>}\n      {error && <p>{error}</p>}\n      <ContactList contacts={filterContact} onLeaveFeedback={handleDelete} />\n      <GlobalStyle />\n    </div>\n  );\n}\n\nContacts.propTypes = {\n  state: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n"],"names":["GlobalStyle","createGlobalStyle","ContactForm","onSubmit","useState","name","setName","phone","setPhone","id","setId","reset","className","css","evt","preventDefault","htmlFor","type","value","onChange","target","nanoid","pattern","title","required","ContactList","contacts","onLeaveFeedback","map","contact","onClick","protoType","PropTypes","selectItems","state","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Contacts","dispatch","useDispatch","filterCont","useSelector","selectors","filterContact","item","toLowerCase","includes","useEffect","operations","searchName","find","alert","setFilter","itemId"],"sourceRoot":""}